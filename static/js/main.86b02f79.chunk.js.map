{"version":3,"sources":["components/GithubPullsChart/serializePulls.ts","hooks/useGithubPulls/actions.ts","hooks/useGithubPulls/reducer.ts","hooks/useGithubPulls/useGithubPulls.ts","components/GithubPullsChart/GithubPullsChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DATE_KEY","Actions","defaultState","loaded","loading","page","pulls","reducer","state","action","type","Start","Next","value","Finished","Load","Error","GITHUB_API","serializePull","pull","reduce","pullObj","key","renderLegendText","style","color","fontWeight","GithubPullsChart","width","height","repo","perPage","useReducer","dispatch","complete","useEffect","a","fetch","fetchPulls","link","parseLinkHeader","headers","get","json","map","next","Number","run","useGithubPulls","data","useMemo","monthBounds","dates","start","Date","created_at","isBefore","end","eachMonthOfInterval","days","day","format","opened","closed","createdKey","closedKey","closed_at","Object","keys","date","gap","serializePulls","ResponsiveContainer","minHeight","minWidth","BarChart","margin","top","bottom","CartesianGrid","stroke","vertical","Legend","verticalAlign","align","layout","formatter","XAxis","dy","dataKey","interval","tickLine","tickFormatter","split","tick","fill","YAxis","dx","tickCount","Tooltip","Bar","name","stackId","radius","legendType","barSize","tooltipType","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86b02f79.chunk.js","sourcesContent":["import { eachMonthOfInterval, format, isBefore } from \"date-fns\";\n\nimport { Pull } from \"../../hooks/useGithubPulls/reducer\";\n\nconst DATE_KEY = \"yyyy/MM\";\n\nexport function serializePulls(pulls: Pull[]) {\n  const monthBounds = [...pulls].reduce(\n    (dates, pull) => {\n      const start = new Date(pull.created_at);\n\n      if (isBefore(start, dates.start)) {\n        return { ...dates, start };\n      }\n      return dates;\n    },\n    { end: new Date(), start: new Date() }\n  );\n  const data = eachMonthOfInterval(monthBounds).reduce((days, day) => {\n    days[format(new Date(day), DATE_KEY)] = { opened: 0, closed: 0 };\n    return days;\n  }, {} as any);\n\n  for (const pull of pulls) {\n    const createdKey = format(new Date(pull.created_at), DATE_KEY);\n    const closedKey =\n      pull?.closed_at && format(new Date(pull.closed_at), DATE_KEY);\n\n    data[createdKey].opened += 1;\n\n    if (closedKey && data[closedKey]) {\n      data[closedKey].closed += 1;\n    }\n  }\n\n  return Object.keys(data).map((date) => {\n    const { opened, closed } = data[date];\n\n    return {\n      date,\n      opened,\n      closed,\n      gap: 0.5\n    };\n  });\n}\n","import { Pull } from \"./reducer\";\n\nexport enum Actions {\n  Start = \"LOAD_START\",\n  Next = \"LOAD_NEXT\",\n  Error = \"LOAD_ERROR\",\n  Load = \"LOAD_PULLS\",\n  Finished = \"LOAD_FINISHED\"\n}\n\nexport type Action =\n  | {\n      type: Actions.Start | Actions.Finished;\n    }\n  | { type: Actions.Next; value: number }\n  | { type: Actions.Load; value: Pull[] };\n","import { Action, Actions } from \"./actions\";\n\nexport interface Pull {\n  id: string;\n  created_at: string;\n  closed_at?: string;\n}\n\nexport const defaultState = {\n  loaded: false,\n  loading: false,\n  page: 1,\n  pulls: [] as Pull[]\n};\n\nexport type State = typeof defaultState;\n\nexport function reducer(state = defaultState, action: Action): State {\n  switch (action.type) {\n    case Actions.Start: {\n      return { ...state, loading: true };\n    }\n    case Actions.Next: {\n      return { ...state, page: action.value };\n    }\n    case Actions.Finished: {\n      return { ...state, loading: false, loaded: true };\n    }\n    case Actions.Load: {\n      return { ...state, pulls: [...state.pulls, ...action.value] };\n    }\n    default:\n      throw new Error(`Unknown action type`);\n  }\n}\n","import { useEffect, useReducer } from \"react\";\nimport parseLinkHeader from \"parse-link-header\";\n\nimport { Actions } from \"./actions\";\nimport { reducer, defaultState, Pull, State } from \"./reducer\";\n\nexport interface Props {\n  repo?: string;\n  state?: \"all\" | \"closed\" | \"open\";\n  perPage?: number;\n}\n\nexport interface Hook {\n  pulls: Pull[];\n  loading: State[\"loading\"];\n}\n\nconst GITHUB_API = \"https://api.github.com\";\n\nfunction serializePull(pull: any): Pull {\n  const keys = [\"id\", \"created_at\", \"closed_at\"];\n  const pullToObj = keys.reduce((pullObj, key) => {\n    if (key in pull) {\n      pullObj[key] = pull[key];\n    }\n    return pullObj;\n  }, {} as any);\n\n  return pullToObj as Pull;\n}\n\nexport function useGithubPulls(\n  { repo, state, perPage }: Props = {\n    repo: \"downshift-js/downshift\",\n    state: \"all\",\n    perPage: 50\n  }\n): Hook {\n  const [{ loaded, loading, pulls, page }, dispatch] = useReducer(\n    reducer,\n    defaultState\n  );\n\n  const complete = () => dispatch({ type: Actions.Finished });\n\n  useEffect(() => {\n    async function run() {\n      try {\n        dispatch({ type: Actions.Start });\n        const fetchPulls = await fetch(\n          `${GITHUB_API}/repos/${repo}/pulls?state=${state}&page=${page}&per_page=${perPage}`\n        );\n        const link = parseLinkHeader(fetchPulls.headers.get(\"link\") as string);\n        const pulls = await fetchPulls.json();\n        const value = pulls.map(serializePull);\n        dispatch({ type: Actions.Load, value });\n\n        if (link?.next) {\n          dispatch({ type: Actions.Next, value: Number(link.next.page) });\n        } else {\n          complete();\n        }\n      } catch (err) {\n        complete();\n      }\n    }\n\n    if (!loaded) run();\n  }, [page, loaded, perPage, repo, state]);\n\n  if (Number(perPage) > 100) {\n    throw new Error(\"useGithubPulls: Maximum number of items per page is 100\");\n  }\n\n  return {\n    loading,\n    pulls\n  };\n}\n","import { FC, useMemo } from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n  CartesianGrid\n} from \"recharts\";\nimport { Formatter } from \"recharts/types/component/DefaultLegendContent\";\nimport { Props as ResponsiveContainerProps } from \"recharts/types/component/ResponsiveContainer\";\n\nimport { serializePulls } from \"./serializePulls\";\nimport { useGithubPulls } from \"../../hooks/useGithubPulls\";\n\ninterface Props extends Pick<ResponsiveContainerProps, \"width\" | \"height\"> {}\n\nconst renderLegendText: Formatter = (value) =>\n  value !== \"gap\" && (\n    <span style={{ color: \"rgba(0, 0, 0, 0.6)\", fontWeight: \"bold\" }}>\n      {value}\n    </span>\n  );\n\nexport const GithubPullsChart: FC<Props> = ({ width, height }) => {\n  const { pulls } = useGithubPulls();\n  const data = useMemo(() => serializePulls(pulls), [pulls]);\n\n  return (\n    <ResponsiveContainer\n      width={width || \"100%\"}\n      height={height || \"100%\"}\n      minHeight={500}\n      minWidth={120}\n    >\n      <BarChart data={data} margin={{ top: 8, bottom: 8 }}>\n        <CartesianGrid stroke=\"#cecece\" vertical={false} />\n        <Legend\n          width={240}\n          verticalAlign=\"top\"\n          align=\"left\"\n          layout=\"vertical\"\n          formatter={renderLegendText}\n        />\n        <XAxis\n          height={80}\n          dy={12}\n          dataKey=\"date\"\n          interval={12}\n          tickLine={false}\n          tickFormatter={(value) => value.split(\"/\")[0]}\n          tick={{ fill: \"rgba(0, 0, 0, 0.4)\" }}\n          stroke=\"transparent\"\n        />\n        <YAxis\n          width={24}\n          dx={-16}\n          type=\"number\"\n          tickLine={false}\n          tickCount={25}\n          tick={{ fill: \"rgba(0, 0, 0, 0.4)\" }}\n          stroke=\"transparent\"\n        />\n        <Tooltip />\n        <Bar\n          name=\"PRs opened\"\n          stackId=\"x\"\n          dataKey=\"opened\"\n          fill=\"rgb(241,160,70)\"\n          radius={2}\n          legendType=\"circle\"\n        />\n        <Bar\n          stackId=\"x\"\n          dataKey=\"gap\"\n          barSize={1}\n          fill=\"transparent\"\n          tooltipType=\"none\"\n        />\n        <Bar\n          name=\"PRs closed\"\n          stackId=\"x\"\n          dataKey=\"closed\"\n          fill=\"rgb(117, 250, 139)\"\n          radius={2}\n          legendType=\"circle\"\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import \"./App.css\";\nimport { GithubPullsChart } from \"./components/GithubPullsChart\";\n\nfunction App() {\n  return <GithubPullsChart />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}